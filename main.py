import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from catalogue_loader import load_payment_info_from_file, get_unique_bins, get_unique_geos, search_by_bin, search_by_geo
from user_manager import initialize_user_table, register_user, get_user_profile


# Enable logging
#logging.basicConfig(
#    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#    level=logging.INFO
#)
#logger = logging.getLogger(__name__)

# Start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    user_id = update.effective_user.id
    username = update.effective_user.username or "unknown"
    register_message = register_user(user_id, username)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(register_message)

    keyboard = [
        [InlineKeyboardButton('üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç', callback_data='list_items')],
        [InlineKeyboardButton('‚ÄºÔ∏è –ü—Ä–∞–≤–∏–ª–∞ ‚ÄºÔ∏è', callback_data='rules'),
         InlineKeyboardButton('üì£ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')],
        [InlineKeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile'),
         InlineKeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='balance')],
        [InlineKeyboardButton('üîÑ –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞', callback_data='refund')],
        [InlineKeyboardButton('üõ†Ô∏è –ü–∞–Ω–µ–ª—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', callback_data='supplier_panel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞—Ä–∫–µ—Ç! –í –º–∞—Ä–∫–µ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º. \n\n–°–æ–≤–µ—Ä—à–∞—è –ø–æ–∫—É–ø–∫—É, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–∫—É–ø–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.',
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞—Ä–∫–µ—Ç! –í –º–∞—Ä–∫–µ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º. \n\n–°–æ–≤–µ—Ä—à–∞—è –ø–æ–∫—É–ø–∫—É, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–∫—É–ø–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.',
            reply_markup=reply_markup
        )

# Handle button clicks
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'list_items':
        keyboard = [
            [InlineKeyboardButton('üî¢ –ë–∏–Ω—ã', callback_data='bins')],
            [InlineKeyboardButton('üåç –ì–µ–æ', callback_data='geo')],
            [InlineKeyboardButton('üîç –ü–æ–∏—Å–∫ –ø–æ BIN', callback_data='search_bin')],
            [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')]
        ]
        await query.edit_message_text(
            text='üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data == 'bins':
        bins = get_unique_bins()
        keyboard = [[InlineKeyboardButton(bin, callback_data=f'bin_{bin}')] for bin in bins]
        keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='list_items')])
        await query.edit_message_text(
            text="üî¢ –í—ã–±–µ—Ä–∏—Ç–µ BIN:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data == 'geo': 
        geo_data = get_unique_geos()
        keyboard = [[InlineKeyboardButton(geo, callback_data=f'geo_{geo}')] for geo in geo_data]
        keyboard.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='list_items')])
        await query.edit_message_text(
            text="üåç –í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data.startswith('bin_') and '_' in data:
        parts = data.split('_')
        if len(parts) > 1:
            bin_prefix = parts[1]
            results = search_by_bin(bin_prefix)
            text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n"
            for result in results:
                if len(result) >= 5:
                    geo, bank, number, date, cvc = result[:5]
                    text += f"üåç {geo}, üè¶ {bank}, üí≥ {number}, üìÖ {date}, üîë {cvc}\n"
                else:
                    text += "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–ø–∏—Å–∏.\n"
            await query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='bins')]]))

    elif data.startswith('geo_') and '_' in data:
        parts = data.split('_')
        if len(parts) > 1:
            geo = parts[1]
            results = search_by_geo(geo)
            text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n"
            for result in results:
                if len(result) >= 5:
                    geo, bank, number, date, cvc = result[:5]
                    text += f"üåç {geo}, üè¶ {bank}, üí≥ {number}, üìÖ {date}, üîë {cvc}\n"
                else:
                    text += "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–ø–∏—Å–∏.\n"
            await query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='geo')]]))

    elif data == 'search_bin':
        await query.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–µ 7 –∏–ª–∏ 8 —Ü–∏—Ñ—Ä BIN –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='list_items')]])
        )
        context.user_data['awaiting_bin_input'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ BIN

    elif data == 'search_bin':  # –ü–æ–∏—Å–∫ –ø–æ BIN (–ø—Ä–æ—Å—Ç–æ–π –≤–≤–æ–¥)
        await query.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–µ 7 –∏–ª–∏ 8 —Ü–∏—Ñ—Ä BIN –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='list_items')]])
        )
        context.user_data['awaiting_bin_input'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ BIN

    elif data == 'rules':
        await query.edit_message_text(
            text='–°–æ–≤–µ—Ä—à–∞—è –ø–æ–∫—É–ø–∫—É –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —ç—Ç–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n1. –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞ 3-–º –ª–∏—Ü–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–∞, –≤ —Å–ª—É—á–∞–µ –≤—ã—è—Å–Ω–µ–Ω–∏—è —Ñ–∞–∫—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏, –º—ã –∏–º–µ–µ–º –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å –≤–∞–º –≤ –∑–∞–º–µ–Ω–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.\n2. –î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç (–º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –±–∞–ª–∞–Ω—Å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞)\n3. –ó–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫, —Ä–µ–∫–ª–∞–º—ã, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—á–∞–µ—Ç: @bullyman4ik',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')]
            ])
        )
    
    elif data == 'support':
        await query.edit_message_text(
            text='–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞ —Å–≤—è–∑–∏ 24/7. –ü–∏—Å–∞—Ç—å: @bullyman4ik',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')]
            ])
        )

    elif data == 'profile':
        user_id = update.effective_user.id
        user = get_user_profile(user_id)
        if user:
            username, balance, registered_at = user
            text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\nUsername: {username}\n–ë–∞–ª–∞–Ω—Å: {balance}üí∞\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registered_at}"
        else:
            text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')]])
        )

    elif data == 'back_to_main':
        await start(update, context)

    else:
        responses = {
            'support': 'üì£ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @support_bot',
            'profile': 'üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: –ò–º—è, –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.',
            'balance': 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ CryptoBot API.',
            'refund': 'üîÑ –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.',
            'supplier_panel': 'üõ†Ô∏è –î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.'
        }
        response = responses.get(data, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.')
        await query.edit_message_text(
            text=response,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')]
            ])
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BIN)
async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_bin_input'):
        bin_prefix = update.message.text.strip()
        results = await search_by_bin(bin_prefix)
        if results:
            text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n" + "\n".join(
                f"üåç {geo}, üè¶ {bank}, üí≥ {number}, üìÖ {date}, üîë {cvc}" for geo, bank, number, date, cvc in results
            )
        else:
            text = f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BIN: {bin_prefix}"
        await update.message.reply_text(text)
        context.user_data['awaiting_bin_input'] = False

# Main function to run the bot
def main():
    load_payment_info_from_file()
    initialize_user_table()

    application = ApplicationBuilder().token('8053455390:AAGVSy0-_GGX4yaF0J9yHcB8xXM94jBBh3A').build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input))  # NEW

    application.run_polling()

if __name__ == '__main__':
    main()
