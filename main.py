import telebot
import time
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from catalogue_loader import load_payment_info_from_file, get_unique_bins, get_unique_geos, search_by_bin, search_by_geo, initialize_bins_table, initialize_payments_table, set_bin_price
from user_manager import initialize_user_table, register_user, get_user_profile
from telebot import apihelper

apihelper.RETRY_ON_TIMEOUT = True
apihelper.SESSION_TIMEOUT = 90  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
apihelper.READ_TIMEOUT = 90     # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
apihelper.CONNECT_TIMEOUT = 90  # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot('8053455390:AAGVSy0-_GGX4yaF0J9yHcB8xXM94jBBh3A')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_top_up_amounts = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    admin_ids = [7338415218, 987654321]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    return user_id in admin_ids


def get_main_menu():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton('üìã –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç / –ö—É–ø–∏—Ç—å', callback_data='list_items'))
    keyboard.row(
        InlineKeyboardButton('‚ÄºÔ∏è –ü—Ä–∞–≤–∏–ª–∞ ‚ÄºÔ∏è', callback_data='rules'),
        InlineKeyboardButton('üì£ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')
    )
    keyboard.row(
        InlineKeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile'),
        InlineKeyboardButton('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='balance')
    )
    keyboard.add(InlineKeyboardButton('üîÑ –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞', callback_data='refund'))
    keyboard.add(InlineKeyboardButton('üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data='admin_panel'))
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"
    user_profile = get_user_profile(user_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ None
    if not user_profile:
        register_message = register_user(user_id, username)  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(register_message)

    bot.send_message(
        message.chat.id,
        text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞—Ä–∫–µ—Ç! –í –º–∞—Ä–∫–µ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º. \n\n–°–æ–≤–µ—Ä—à–∞—è –ø–æ–∫—É–ø–∫—É, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–∫—É–ø–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.',
        reply_markup=get_main_menu()
    )

def handle_admin_buttons(call):
    data = call.data

    if data == 'set_bin_price_menu':
        bins = get_unique_bins()
        keyboard = InlineKeyboardMarkup()
        for bin_id, bin_code, price in bins:
            keyboard.add(InlineKeyboardButton(f"ID: {bin_id} | BIN: {bin_code} | –¶–µ–Ω–∞: {price}", 
                                              callback_data=f'set_price_{bin_id}'))
        keyboard.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='admin_panel'))

        bot.edit_message_text(
            text='–í—ã–±–µ—Ä–∏—Ç–µ BIN –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã:',
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard
        )
    elif data.startswith('set_price_'):
        try:
            bin_id = int(data.split('_')[2])
            user_states[call.message.chat.id] = f'awaiting_price_for_{bin_id}'
            bot.send_message(call.message.chat.id, f'üíµ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è BIN —Å ID {bin_id}:')
        except ValueError:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID BIN.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call: CallbackQuery):
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    user_profile = get_user_profile(user_id)
    if not user_profile:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    data = call.data

    try:
        if data == 'list_items':
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton('–ë–∏–Ω—ã', callback_data='bins'))
            keyboard.add(InlineKeyboardButton('üåç –ì–µ–æ', callback_data='geo'))
            keyboard.add(InlineKeyboardButton('üîç –ü–æ–∏—Å–∫ –ø–æ BIN', callback_data='search_bin'))
            keyboard.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main'))

            bot.edit_message_text(
                text='üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=keyboard
            )

        elif data == 'bins':
            bins = get_unique_bins()
            keyboard = InlineKeyboardMarkup()
            for bin_id, bin_code, price in bins:
                keyboard.add(InlineKeyboardButton(f"{bin_code} - {price}", callback_data=f'bin_{bin_id}'))
            keyboard.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='list_items'))

            bot.edit_message_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ BIN:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=keyboard
            )

        elif data == 'geo':
            geo_data = get_unique_geos()
            keyboard = InlineKeyboardMarkup()
            for geo in geo_data:
                keyboard.add(InlineKeyboardButton(geo, callback_data=f'geo_{geo}'))
            keyboard.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='list_items'))

            bot.edit_message_text(
                text="üåç –í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=keyboard
            )

        elif data.startswith('bin_'):
            bin_prefix = data.split('_')[1]
            results = search_by_bin(bin_prefix)
            text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n"
            for geo, bin_code in results:
                text += f"üåç {geo}, BIN: {bin_code}\n"

            bot.edit_message_text(
                text=text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='bins'))
            )

        elif data.startswith('geo_'):
            geo = data.split('_')[1]
            results = search_by_geo(geo)
            text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n"
            for geo, bin_code in results:
                text += f"üåç {geo}, BIN: {bin_code}\n"

            bot.edit_message_text(
                text=text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='geo'))
            )

        elif data == 'search_bin':
            bot.edit_message_text(
                text="–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–µ 7 –∏–ª–∏ 8 —Ü–∏—Ñ—Ä BIN –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='list_items'))
            )
            user_states[call.message.chat.id] = 'awaiting_bin_input'

        elif data == 'rules':
            bot.edit_message_text(
                text='–°–æ–≤–µ—Ä—à–∞—è –ø–æ–∫—É–ø–∫—É –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —ç—Ç–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n1. –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞ 3-–º –ª–∏—Ü–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–∞, –≤ —Å–ª—É—á–∞–µ –≤—ã—è—Å–Ω–µ–Ω–∏—è —Ñ–∞–∫—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏, –º—ã –∏–º–µ–µ–º –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å –≤–∞–º –≤ –∑–∞–º–µ–Ω–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.\n2. –î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç (–º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –±–∞–ª–∞–Ω—Å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞)\n3. –ó–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫, —Ä–µ–∫–ª–∞–º—ã, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—á–∞–µ—Ç: @bullyman4ik',
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main'))
            )

        elif data == 'support':
            bot.edit_message_text(
                text='–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞ —Å–≤—è–∑–∏ 24/7. –ü–∏—Å–∞—Ç—å: @bullyman4ik',
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main'))
            )

        elif data == 'profile':
            user_id = call.from_user.id
            user = get_user_profile(user_id)
            if user:
                username, balance, registered_at = user
                text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\nUsername: {username}\n–ë–∞–ª–∞–Ω—Å: {balance}üí∞\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registered_at}"
            else:
                text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."

            bot.edit_message_text(
                text=text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main'))
            )

        elif data == 'back_to_main':
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞—Ä–∫–µ—Ç! –í –º–∞—Ä–∫–µ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º. \n\n–°–æ–≤–µ—Ä—à–∞—è –ø–æ–∫—É–ø–∫—É, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–∫—É–ø–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.',
                reply_markup=get_main_menu()
            )
        elif data == 'admin_panel':
            if not is_admin(user_id):
                bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
                return

            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton('üìù –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ü–µ–Ω—É BIN', callback_data='set_bin_price_menu'))
            keyboard.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main'))

            bot.edit_message_text(
                text='üõ†Ô∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=keyboard
            )
        elif data.startswith('set_price_') or data == 'set_bin_price_menu':
            handle_admin_buttons(call)

        elif data == 'balance':
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å–µ—Ç–∏
            keyboard = InlineKeyboardMarkup()
            keyboard.row(
                InlineKeyboardButton('TRC20', callback_data='network_trc20'),
                InlineKeyboardButton('ARB', callback_data='network_arb'),
                InlineKeyboardButton('SOL', callback_data='network_sol')
            )
            keyboard.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main'))

            bot.edit_message_text(
                text="üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=keyboard
            )
        
        elif data.startswith('network_'):
            network = data.split('_')[1].upper()
            address = ''
            
            # –ó–∞–¥–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏
            if network == 'TRC20':
                address = 'TMax4UdZEWzh3FYG889fwSivknWKhd4CJN'
            elif network == 'ARB':
                address = '0x79d9b8fd2ce5b089f9d6a85679e82417908740e4'
            elif network == 'SOL':
                address = 'AzdwrmrmBPyDqUw6xw1X1f61xwAoeiymYP7nrjJ949rr'

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton('‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data=f'confirm_payment_{network}'))
            keyboard.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='balance'))

            bot.edit_message_text(
                text=f"üí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ç—å {network}, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∞–¥—Ä–µ—Å:\n\n`{address}`\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'.",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )

        elif data.startswith('confirm_payment_'):
            network = data.split('_')[2].upper()
            admin_id = 7338415218  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å
            bot.send_message(
                admin_id,
                text=f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.username} ({call.from_user.id}) –∑–∞—è–≤–∏–ª –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ —Å–µ—Ç—å {network}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ."
            )
            bot.send_message(
                call.message.chat.id,
                text="‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_main'))
            )

        elif data == 'back_to_main':
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞—Ä–∫–µ—Ç! –í –º–∞—Ä–∫–µ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º. \n\n–°–æ–≤–µ—Ä—à–∞—è –ø–æ–∫—É–ø–∫—É, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–∫—É–ø–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.',
                
                reply_markup=get_main_menu()
            )
        
        else:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}")
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: True)
def handle_text_messages(message):
    chat_id = message.chat.id
    state = user_states.get(chat_id)

    if state:
        if state == 'awaiting_bin_input':
            if message.text.isdigit():
                results = search_by_bin(message.text)
                if results:
                    text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n"
                    for geo, bin_code in results:
                        text += f"üåç {geo}, BIN: {bin_code}\n"
                else:
                    text = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É BIN."

                bot.send_message(chat_id, text, reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='list_items')
                ))
                user_states.pop(chat_id)
            else:
                bot.send_message(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã BIN.")
        elif state.startswith('awaiting_price_for_'):
            try:
                bin_id = int(state.split('_')[-1])
                price = float(message.text)
                set_bin_price(bin_id, price)
                bot.send_message(chat_id, f"‚úÖ –¶–µ–Ω–∞ –¥–ª—è BIN —Å ID {bin_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {price:.2f}üí∞.")
                user_states.pop(chat_id)
            except ValueError:
                bot.send_message(chat_id, "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ü–µ–Ω—ã.")
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    else:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
@bot.callback_query_handler(func=lambda call: call.data == 'balance')
def recharge_balance(call):
    markup = InlineKeyboardMarkup()
    networks = ['TRC20', 'Arbitrum', 'Solana']
    for network in networks:
        markup.add(InlineKeyboardButton(network, callback_data=f"select_{network}"))
    bot.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("select_"))
def send_payment_address(call):
    network = call.data.split("_")[1]
    addresses = {
        'TRC20': 'TMax4UdZEWzh3FYG889fwSivknWKhd4CJN',
        'Arbitrum': '0x79d9b8fd2ce5b089f9d6a85679e82417908740e4',
        'Solana': 'AzdwrmrmBPyDqUw6xw1X1f61xwAoeiymYP7nrjJ949rr'
    }
    address = addresses.get(network)
    if address:
        bot.edit_message_text(
            text=f"–ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ —Å–µ—Ç–∏ {network}:\n`{address}`\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏–ª'.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{network}"))
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏–ª"
@bot.callback_query_handler(func=lambda call: call.data.startswith("paid_"))
def confirm_payment_request(call):
    network = call.data.split("_")[1]
    admin_id = 123456789  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    bot.send_message(
        admin_id,
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} —Å–æ–æ–±—â–∏–ª –æ –ø–µ—Ä–µ–≤–æ–¥–µ –ø–æ —Å–µ—Ç–∏ {network}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞—Ç–µ–∂."
    )
    bot.edit_message_text(
        text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@bot.message_handler(commands=['confirm'])
def confirm_balance(message):
    ADMIN_ID = 7338415218  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split()
        if len(parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        
        _, user_id, amount = parts
        user_id = int(user_id)
        amount = float(amount)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if not user_exists(user_id):
            bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_balance(user_id, amount)
        bot.send_message(user_id, f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –µ–¥–∏–Ω–∏—Ü.")
        bot.reply_to(message, "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    
    except ValueError:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /confirm <user_id> <amount>")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


def update_balance(user_id, amount):
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ SQLite –∏–ª–∏ –¥—Ä—É–≥–æ–π –±–∞–∑–µ
    print(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount} –µ–¥–∏–Ω–∏—Ü.")

def user_exists(user_id):
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return user_id

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True, interval=2, timeout=60, long_polling_timeout=60)
        except apihelper.ReadTimeout:
            print("[ERROR] ReadTimeout: –°–µ—Ä–≤–µ—Ä Telegram –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            time.sleep(5)
        except apihelper.ApiException as e:
            print(f"[ERROR] ApiException: {e}")
            time.sleep(5)
        except Exception as e:
            print(f"[ERROR] Unexpected error: {e}")
            time.sleep(5)
